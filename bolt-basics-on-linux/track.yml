slug: bolt-basics-on-linux
id: diticbtrwatq
type: track
title: Bolt Basics on Linux
teaser: Install Bolt and manage your first remote targets.
description: |
  Bolt is an open source orchestration tool that automates the manual work it takes to maintain your infrastructure, helping you to complete ad hoc tasks remotely on a large number of targets. For example, you can use Bolt to patch and update systems, troubleshoot servers, deploy applications, and stop and restart services.


   **You'll learn:**
    - What Bolt is and when to use it.
    - How to install Bolt.
    - How to verify that your installation works as expected.
    - How to run Bolt commands to update the NTP service on target nodes to keep their clocks synchronized.



  **Why complete this track?**

  If you're new to Bolt, start here. Whether your goal is to quickly and easily troubleshoot ad hoc issues or deploy apps across your infrastructure, this is the first step to take to get there.

  **Prerequisites:**
   - Linux command line experience is helpful but not required.
   - NTP service familiarity is helpful but not required.

  ---

  **Keep an eye on the clock**

  ![30 minute lab](https://storage.googleapis.com/instruqt-images/Clocks%20for%20Track%20Duration/30min100.png) The virtual learning environment will stay up for 60 minutes, however, **this lab should only take about 30 minutes** to complete. When your learning environment expires, your work will not be saved. If you haven't completed the lab, you can simply restart it.

  Click **Start track** when you're ready to begin.
icon: https://storage.googleapis.com/instruqt-images/bolt-logo-icon.png
tags:
- ""
owner: puppet
developers:
- greg.larkin@puppet.com
- tara.swenson@puppet.com
private: true
published: true
show_timer: true
skipping_enabled: true
challenges:
- slug: install-bolt-on-linux
  id: eqmodrpl9ij4
  type: challenge
  title: "Install Bolt \U0001F4BB"
  teaser: Install Bolt in minutes and start using it right away.
  notes:
  - type: text
    contents: |-
      # What is Bolt?
      Bolt is an open source automation tool that automates manual infrastructure maintenance tasks, including both ad hoc tasks and tasks that are part of a bigger workflow.

      Use Bolt to:
      - Patch and update systems
      - Troubleshoot servers
      - Deploy applications
      - Stop and restart services

      ## **Start this track**
      When your environment has finished spinning up, you'll see a green **Start** button at the bottom of the screen (this should take about 1 minute). Click it when you're ready to begin the track.
  assignment: |
    # Install Bolt
    The best way to learn about Bolt is to try it out for yourself. Start by configuring the Bolt yum repository, also known as the Puppet package repository — by default, this isn't configured on standard Linux installations. Then, install Bolt.

    # Step 1: Configure the Puppet package repository
    To configure the Puppet package repository, run the following command:
    ```
    rpm -Uvh https://yum.puppet.com/puppet-tools-release-el-7.noarch.rpm
    ```
    The `rpm -Uvh` command installs the package that configures the Bolt yum repository. The `-Uvh` flags tell Bolt to update the system with this package (-U), enable verbose logging (-v), and show a progress bar.

    # Step 2: Install Bolt

    Now, install Bolt by running this command:
    ```
    yum install -y puppet-bolt-3.7.1
    ```

    The `yum` command invokes the Linux package manager, which locates the package in any of the configured package repositories (in this case, puppet-bolt-3.7.1) and installs it on the system. The package manager also installs any package dependencies.

    The `-y` option suppresses additional installation prompts.

    Notice that a specific version (3.7.1) of Bolt is installed by running this command. The commands in the rest of this track work with this Bolt version. To install the latest version of Bolt, just omit the version number:
    yum install -y puppet-bolt

    ✏️ **Note:**
    There are many ways to install Bolt. For details, check out the [Bolt installation docs](https://puppet.com/docs/bolt/latest/bolt_installing.html).

    ✔️ **Result:** Notice the Transaction Summary section in the output. If Bolt installed successfully, you'll see “Complete!” at the end of the summary.

    To go to the next challenge, click **Check**.
  tabs:
  - title: Bolt
    type: terminal
    hostname: puppet
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 720
- slug: verify-your-bolt-installation-linux
  id: wvghomls1zpw
  type: challenge
  title: Verify Your Bolt Installation ✔️
  teaser: Make sure your Bolt installation works as expected.
  notes:
  - type: text
    contents: |
      Now that you've installed Bolt, make sure it works as expected.

      To begin the next challenge, click **Start**.
  assignment: |-
    You can quickly confirm Bolt is installed correctly by running some basic Bolt commands.

    First, show the Bolt version by running this command:
    ```
    bolt --version
    ```

    Then, show the Bolt help message:
    ```
    bolt --help
    ```

    To show all the Bolt commands, run **bolt --help** again.

    Bolt also shows help for each of its subcommands. For example, to get help for the **script** command, run:
    ```
    bolt script --help
    ```

    ✔️ **Result:** If Bolt is installed correctly, you'll see the output on the command line.

    To continue, click **Check**.
  tabs:
  - title: Bolt
    type: terminal
    hostname: puppet
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 720
- slug: run-bolt-commands-on-remote-targets
  id: xpxk4boeqvir
  type: challenge
  title: "Run Bolt Commands on Remote Targets \U0001F469‍\U0001F4BB"
  teaser: Run your first Bolt commands on remote targets.
  notes:
  - type: text
    contents: |-
      Bolt runs commands on remote target nodes and orchestrates ad hoc tasks across your server infrastructure.

      In this challenge, you will run Bolt commands to check, start, and verify the Network Time Protocol (NTP) service on two target nodes.

      When you’re ready to continue, click **Start**.
  assignment: |-
    Now that you've verified your Bolt installation, it's time to get some hands-on practice with Bolt by managing the Network Time Protocol (NTP) service on two target nodes.

    **What is a target?**
    A target is anything that Bolt can connect to, such as servers (nodes), Docker containers, and network devices.

    **What is NTP?**
    NTP is a service that synchronizes servers' clocks. It’s important to configure this service to start automatically on servers that you add to your infrastructure. Accurate timekeeping ensures proper secure communications between remote clients and networked servers that host databases, web servers, and other applications.

    In this challenge, you will check the status of the NTP service on two remote target nodes. Then, you will remotely log into each target node to start the service. Finally, you will confirm that the NTP service has been started on both target nodes.

    # Step 1: Check the NTP service status
    Check the status of the NTP service on two remote target nodes: target1 and target2. Hint: The ‘fail’ message that you'll see is expected because you haven't started the service yet - you'll do that in step 2.

    Run the following command:
    ```
    bolt command run '/bin/systemctl status ntpd.service' --no-host-key-check --targets target1,target2
    ```

    This Bolt command logs in remotely to the target nodes and returns their NTP service status.

    The`--no-host-key-check` portion of the command is optional and is included here to:
    - Suppress a warning that would be shown if the target has never been remotely accessed before.
    - Eliminate the need for you to confirm the SSH fingerprint of the remote machine.

    ✔️ **Result:**
    The ‘fail’ messages indicate that each target is inactive, which is expected at this point. Continue to step 2.


    # Step 2: Start the NTP service
    The NTP service does not start by default. Run the following command to remotely log in again and start the service on the target nodes:
    ```
    bolt command run '/bin/systemctl start ntpd.service' --no-host-key-check --targets target1,target2
    ```

    ✔️ **Result:** Notice the “Successful on 2 targets: target1, target2” message. This means that you started the NTP service on both target nodes. Nice job.

    # Step 3: Confirm that the NTP service is running
    Run the command from step 1 again to confirm that the NTP service has been started on both targets.

    ✔️ **Result:** Now that you have started the NTP service on the targets, notice the detailed information and the message “Successful on 2 targets: target1, target2”.

    You can now add the targets to an existing infrastructure with additional configuration for their specific purposes.

    To continue, click **Check**.
  tabs:
  - title: Bolt
    type: terminal
    hostname: puppet
  - title: Target 1
    type: terminal
    hostname: target1
  - title: Target 2
    type: terminal
    hostname: target2
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 720
- slug: knowledge-check
  id: qhdb3cpdzkci
  type: challenge
  title: "Knowledge Check \U0001F4A1"
  teaser: Test your knowledge to make sure you've got it down.
  notes:
  - type: text
    contents: |-
      # Great job!

      Next, check your knowledge to make sure you've got it down.

      When you're ready, click **Start**.
  assignment: |-
    Answer the questions, click **Submit**, and then click **View accuracy** to see how you did. Your results will appear in a new browser tab.

    When you've finished reviewing your results, click **Check** to continue the track.
  tabs:
  - title: Knowledge Check
    type: website
    hostname: puppet
    url: https://docs.google.com/forms/d/e/1FAIpQLSfamZAZYut5x0VX998jHdsXSzS3fX9IAYq_e9AiRSpXr6O80g/viewform?embedded=true
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 720
- slug: wrapup-and-feedback
  id: vor7wnab2oje
  type: challenge
  title: "Wrap-Up & Feedback \U0001F4AC"
  teaser: Recap what you learned and tell us what you think.
  notes:
  - type: text
    contents: |-
      # Excellent! You’re nearly done!

      Click **Start** to review what you learned and let us know what you thought of this track.
  assignment: |-
    In this lab, you learned what Bolt is, how to install it, and how to verify your installation. In a simulated environment, you ran Bolt commands to check the status of the NTP service and start it on two targets. Then, you tested your knowledge to make sure you've got it down.

    Want to learn more about Bolt or Puppet? Check out these resources:
    - [Bolt Docs](https://puppet.com/docs/bolt/latest/bolt.html)
    - [Puppet Compass](https://learn.puppet.com/)
    - [Puppet Community Slack](https://slack.puppet.com/)

    To access the commands used throughout this lab, visit the companion [Lab Aid](https://puppet-kmo.gitbook.io/not-tutorials/-MZKPjwKRKKFuXxxy7ge/).

    Have ideas for improvement? Submit a pull request on [Github](https://github.com/puppetlabs/puppet-practice-labs/tree/main/install-bolt-on-linux) or reach out to us directly at <a href="mailto:education@puppet.com">education@puppet.com</a>.

    To close this track, click **Check**.
  tabs:
  - title: Feedback Survey
    type: website
    hostname: target1c
    url: https://docs.google.com/forms/d/e/1FAIpQLSc89N9XCQoDEkET-uVKqjZWGnqMw0IbzZeeuuCKcoQk5oXr0g/viewform?embedded=true
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 715
checksum: "9863362875278406607"
