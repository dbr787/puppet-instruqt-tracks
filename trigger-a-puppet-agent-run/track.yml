slug: trigger-a-puppet-agent-run
id: un8tjaoc0dh6
type: track
title: Run Puppet Manually After Defining a Desired State
teaser: Learn the basics of defining a node's desired state, and watch how the agent makes changes to achieve desired state during a Puppet run.
description: |-
  By default, Puppet runs every 30 minutes. But you can manually run Puppet, too - for example, when you simply want to observe what happens during a Puppet run or if you're developing code and want to observe the agent as it makes the required changes to the agent node.


  The Puppet agent is an application that manages configurations on your nodes by using a [*catalog*](https://puppet.com/docs/puppet/latest/glossary.html#catalog). After requesting and receiving the catalog from the primary Puppet server, the agent checks the current state of each [*resource*](https://puppet.com/docs/puppet/latest/glossary.html#resource) that the catalog describes, making changes as needed to get each resource into its desired state.


  **Why complete this track?**

  In this track, you'll walk through what happens on the agent node during a Puppet run to understand how the agent communicates with the primary server.

  You'll learn how to:
  - List and sign agent certificates, required for secure communication between the primary server and agent.
  - Interpret the agent output during the Puppet run.
  - Write code in the server's site.pp manifest to classify a node and begin defining its desired state.



  **Keep an eye on the clock!**

  You will have 30 minutes to complete this track. At the end of 30 minutes, your learning environment will automatically expire and your work will not be saved. If you have not completed the track, you can restart the track and skip to any challenge.

  If you prefer to try these steps in your own self-contained environment, you can use the companion [Lab Aid](https://puppet-kmo.gitbook.io/lab-aids/-MZKPjwKRKKFuXxxy7ge/trigger-a-puppet-agent-run).
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/puppet.png
tags: []
owner: puppet
developers:
- bart.kliebert@puppet.com
- greg.larkin@puppet.com
private: true
published: true
show_timer: true
skipping_enabled: true
challenges:
- slug: sign-a-certificate
  id: dty1ff36osqi
  type: challenge
  title: "Sign an Agent Node's Certificate \U0001F4BB"
  teaser: Sign a certificate on an unsigned agent node so that the primary Puppet server can validate the node before authorizing communication.
  notes:
  - type: text
    contents: |-
      # How the primary Puppet server and agents communicate
      The primary Puppet server and Puppet agents communicate over an SSL connection. Before the primary server can communicate with an agent, it verifies that the agent node’s certificate is signed.

      The primary server accepts catalog compilation requests only from agent nodes with signed certificates.

      ## **Start this track**
      When your environment has finished spinning up (this takes about 1 minute), you'll see a green **Start** button at the bottom of the screen. Click it when you're ready to begin the track.
  assignment: |-
    # Step 1: Switch to the agent node
    Switch to the **Agent node** tab to the right so that you can run tasks from the agent node's command line.

    # Step 2: Trigger a Puppet run
    Run the following command to trigger a Puppet run on the agent node, whose certificate is not yet signed.
    ```
    puppet agent -t
    ```
    ✔️ **Result:** As expected, the Puppet run fails. The agent attempts to contact the primary server, but the primary server rejects the request. No problem — you just have to sign the agent node's certificate.

    # A note on autosigning
    As your infrastructure grows, you’ll likely use the Puppet Enterprise (PE) graphical console to manage certificates or enable autosigning so that you can sign many certificates at a time. In this practice lab, or in a demo environment, signing certificates manually from the command line is sufficient for signing a few certificates at a time.

    # Step 3: On the primary server, list the unsigned certificates
    Switch back to the **Primary Server** tab and use the `puppetserver ca` tool to list unsigned certificates:
    ```
    puppetserver ca list
    ```
    Note the name of the unsigned node: `linux-node.classroom.puppet.com`

    # Step 4: Sign the certificate
    Run the following command, which includes the node name:
    ```
    puppetserver ca sign --certname linux-node.classroom.puppet.com
    ```

    ✔️ **Result:** The Puppet agent on `linux-node.classroom.puppet.com` is now authorized to request the catalog from the primary server.

    # Step 5: On the agent node, trigger another run
    Switch back to the **Agent node** tab and run the following command again:
    ```
    puppet agent -t
    ```
    ✔️ **Result:** The agent completes a successful run.

    ## **What’s with all that text?**

    Most of the text scrolling by is from a process called `pluginsync`. During `pluginsync`, any extensions installed on the server (such as custom facts, resource types, or providers) are copied to the agent *before* the Puppet run. This ensures that the agent has the tools it needs to apply the catalog.

    In the next challenge, you'll examine the output to understand what happens during a Puppet run.
  tabs:
  - title: Primary Server
    type: terminal
    hostname: puppet
  - title: Agent Node
    type: terminal
    hostname: linux-node
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 300
- slug: trigger-a-puppet-run
  id: xbnzl6tqkedg
  type: challenge
  title: "Trigger a Puppet Run \U0001F4BB"
  teaser: Discover the high-level steps the agent takes during a Puppet run.
  notes:
  - type: text
    contents: |-
      # Manual vs. automatic Puppet runs
      By default, the agent initiates a Puppet run every 30 minutes. Because it's difficult to demonstrate Puppet with these scheduled background runs, we disabled the Puppet agent service on your agent system.

      Running Puppet manually is helpful when you're developing code — you can observe the agent output as it makes the required changes to the system.

      In these challenges, you’ll use the `puppet agent -t` command to manually trigger a Puppet run.

      When you’re ready to begin, click **Start**.
  assignment: |-
    Now that the agent node's certificate is signed, on its next run the agent can request a catalog from the primary server. Here, you'll explore the high-level steps the agent completes during a Puppet run.

    # Step 1: Switch to the agent node
    Switch to the **Agent node** tab to the right so that you can run tasks from the node's command line.

    # Step 2: Trigger the run
    Run the following command to trigger another Puppet run. The output will be easier to read now that `pluginsyc` did its work in the previous challenge:
    ```
    puppet agent -t
    ```
    ✔️ **Result:** Because the certificate is signed, the agent has permission to retrieve the catalog from the primary server.


    # Step 3: Analyze the output
    Focus on the three lines that look similar to the following text:
    ```
    Info: Loading facts
    Info: Caching catalog for agent.puppet.vm
    Info: Applying configuration version '1464919481'
    ```
    This output shows one side of the conversation between the agent and primary server:
    1. The agent loads the facts (the details of the system that the agent runs on) and sends them to the primary server.
    2. The agent receives a new catalog from the primary server and caches a copy of it.

          ✏️ **Note:**   You can configure the agent to fail over to this cached catalog if it can't connect to the primary server.

    3. The agent configures the node based on the desired state information in the catalog. After this step, you typically see a list of all the changes that the agent made. In this case, the primary server didn't find any Puppet code to apply to the agent node, so the agent didn't make any changes during this run.

    # That’s it?
    Those are the high-level agent steps. Next, you'll define a unique setup, or configuration, for the agent node. This includes defining the desired state of the [resources](https://puppet.com/docs/puppet/latest/glossary.html#resource) on the node.
  tabs:
  - title: Primary Server
    type: terminal
    hostname: puppet
  - title: Agent Node
    type: terminal
    hostname: linux-node
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 300
- slug: specify-a-desired-state
  id: zkwun505nnze
  type: challenge
  title: "Specify a Desired State \U0001F4BB"
  teaser: Specify how to keep the agent node in its desired state by adding a node definition and resource to the `site.pp` manifest.
  notes:
  - type: text
    contents: |-
      # Node classification
      When the primary server receives a catalog request from an agent node with a valid certificate, it begins a process called [*node classification*](https://puppet.com/docs/puppet/latest/glossary.html#classify) to determine what Puppet code to compile to generate a catalog for the agent. The primary server gets this information from the `site.pp` manifest.
  - type: text
    contents: |-
      ## **The site.pp manifest**
      The `site.pp` manifest is a file on the Puppet server where you can write node definitions and specify your nodes' desired states.

      > **Node**: In the context of Puppet, a *node* is any system or device in your infrastructure.

      > **Node definition**: Defines how the primary server should manage a given system. When an agent contacts the server, the server checks the `site.pp` manifest for node definitions that match the node name. Node definitions enable you to assign specific configurations to specific nodes.

      For this example, working with `site.pp` is the easiest way to see how node classification works. You can also get node classification info in the PE console.

      When you’re ready to begin, click **Start**.
  assignment: |-
    # Step 1: Open the manifest file
    Switch to the **Editor** tab and click on the only item in the **FILES** list, your `site.pp` manifest file.

    # Step 2: Examine the definition of the agent node
    As part of node classification, the server checks the manifest for node definitions, which start with declaring the node name:

    node 'linux-node.classroom.puppet.com' {

    }


    Typically, you would include one or more *[class](https://puppet.com/docs/puppet/latest/glossary.html#class) declarations* inside this `node` block.

    # Step 3: Add a resource declaration
    Now add a resource declaration, which adds a resource to the catalog and describes that resource's state. Add the following node definition and resource declaration to the node definition section at bottom of the manifest:

    ✏️ **Customize your code:** In the code block below, replace `Hello Puppet` with your own custom message, which will be displayed on the next Puppet run.

    ```
    node 'linux-node.classroom.puppet.com' {
      notify { 'Hello Puppet!': }
    }
    ```

    # Step 4: Save your changes
    Click the disk icon: <img src="https://education-downloads.s3-us-west-2.amazonaws.com/instruqt-assets/Build+a+Bolt+Inventory+File+on+Linux/save-icon.png">

    ✔️ **Result:** Now when the agent contacts the server, the server uses this node definition (among other things) to compile a catalog for this node.

    # Step 5: Trigger an agent run
    Now that you have some Puppet code for the server to parse, switch to the *Agent node* tab to the right and trigger a Puppet run:
    ```
    puppet agent -t
    ```

    ✏️ **Note:**  In this example, the catalog includes only a `notify` resource type, which instructs the agent to display the message in the code when it applies the catalog on its next run. This code doesn't make any changes to the node.

    ✔️ **Result:** The output from this Puppet run includes the following:

    ```
    Notice: Hello Puppet!
    Notice: /Stage[main]/Main/Node[agent.puppet.vm]/Notify[Hello Puppet!]/message: defined 'message' as 'Hello Puppet!'
    ```

    Resource declarations define the desired state of that node. When a Puppet run is triggered, the server parses these declarations, builds the catalog, and sends it back to the agent. The agent makes the changes to achieve the desired state of the resources in its catalog.

    You can use multiple resource declarations to perform complex operations such as configuring a load balancer or defining hundreds of firewall rules - the sky's the limit.
  tabs:
  - title: Primary Server
    type: terminal
    hostname: puppet
  - title: Agent Node
    type: terminal
    hostname: linux-node
  - title: Editor
    type: code
    hostname: puppet
    path: /etc/puppetlabs/code/environments/production/manifests/site.pp
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 450
- slug: knowledge-check
  id: jgcl5sswpk3h
  type: challenge
  title: "Knowledge Check \U0001F4A1"
  teaser: Test your knowledge to make sure you’ve got it down.
  notes:
  - type: text
    contents: |
      # Great job!

      Next, check your knowledge to make sure you've got it down.

      Click **Start** when you're ready.
  assignment: |-
    Answer the questions, click **Submit**, and then click **View accuracy** to see how you did. Your results will appear in a new browser tab.

    When you've finished reviewing your results, click **Check** to continue the track.
  tabs:
  - title: Knowledge Check
    type: website
    hostname: puppet
    url: https://docs.google.com/forms/d/e/1FAIpQLScTVJ5O_HHQnQv4jX6KGzMS93YZMsWqaRRajBzvjgALaznoHQ/viewform?embedded=true
  difficulty: basic
  timelimit: 360
- slug: wrapup-and-feedback
  id: tgxcnqzczuoo
  type: challenge
  title: "Wrap-up and Feedback \U0001F4AC"
  teaser: Recap what you learned and tell us what you think.
  notes:
  - type: text
    contents: |-
      # Excellent! You’re nearly done!

      Click **Start** to let us know what you thought of this track.
  assignment: |-
    In this lab, you learned how the primary server and agent communicate during a Puppet run.

    You learned how to:
    1. List and sign agent certificates.
    1. Manually trigger a Puppet run and interpret the output.
    1. Write code in the server's `site.pp` manifest to classify a node and specify its desired state.

    Want to learn more about Puppet Enterprise? Check out these resources:
    - [Puppet Enterprise Docs](https://puppet.com/docs/pe/latest)
    - [Puppet Compass](https://learn.puppet.com/)
    - [Puppet Community Slack](https://slack.puppet.com/)

    To access the commands used throughout this lab, visit the companion [Lab Aid](https://puppet-kmo.gitbook.io/lab-aids/-MZKPjwKRKKFuXxxy7ge/).

    Have ideas for improvement? Submit a pull request on [Github](https://github.com/puppetlabs/puppet-instruqt-tracks/tree/main/trigger-a-puppet-agent-run) or reach out to us directly at <a href="mailto:education@puppet.com">education@puppet.com</a>.

    To close this track, click **Check**.
  tabs:
  - title: Feedback
    type: website
    hostname: puppet
    url: https://docs.google.com/forms/d/e/1FAIpQLSc89N9XCQoDEkET-uVKqjZWGnqMw0IbzZeeuuCKcoQk5oXr0g/viewform?embedded=true
  difficulty: basic
  timelimit: 360
checksum: "4485354338456414529"
