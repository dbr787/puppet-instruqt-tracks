slug: build-a-bolt-inventory-file-on-linux
id: yt7oz8p7uzhp
type: track
title: Build a Bolt Inventory File on Linux
teaser: Save time by running tasks across groups of targets.
description: |-
  The Bolt inventory file (inventory.yaml) enables you to simplify how you manage a large number of target nodes, or *targets*. You can define groups of targets in this file and then reference the group — instead of a list of individual targets — in Bolt commands. You can also define connection settings and store information about the targets.

  For example, suppose you need to run a Network Time Protocol (NTP) configuration script on the Linux targets in your environment. In the `inventory.yaml` file, you can define a group named **linux**, and then run the script against that group to update all the targets at once instead of syncing them one at a time or providing all the target names in the Bolt command that invokes the script.


  **What you will learn in this track**
   - First, you'll build an inventory file and assign targets to a group that you can run commands and scripts against.
   - Then, you'll run the `ntpdate` command to synchronize the date and time on the targets defined in the group.
   - Finally, you'll build a script that synchronizes the system clock and starts the NTP service on the targets in the group.



   **Why complete this track?**

  You can use Bolt to make ad hoc changes to targets by including target names when you run commands. This might be easy for managing a handful of targets, but imagine if you have to change 50, 500, or even 5000 targets!


  By defining groups of targets (and other information such as connection parameters) in the `inventory.yaml` file, you can simplify your Bolt commands and ensure that commands are run against the correct targets each time.


  **Before you get started**

  Keep an eye on the clock! You have 30 minutes to complete this track. At the end of 30 minutes, your learning environment expires and your work will not be saved. If you have not completed the track, you can restart the track and skip to any challenge.

  **Prerequisites**
   - Basic familiarity with [Bolt](https://puppet.com/open-source/bolt/)
     - If you are brand new to Bolt, start with the [Bolt Basics on Linux](https://play.instruqt.com/puppet/invite/jpbxwmbt8hdx) track.
   - Familiarity with [shell scripting](https://en.wikipedia.org/wiki/Shell_script)
   - Familiarity with [YAML](https://en.wikipedia.org/wiki/YAML)


   If you prefer to try these steps in your own self-contained environment, you can use the companion [Lab Aid](https://puppet-kmo.gitbook.io/lab-aids/-MZKPjwKRKKFuXxxy7ge/build-a-bolt-inventory-file-on-linux).
icon: https://education-downloads.s3-us-west-2.amazonaws.com/instruqt-assets/bolt-logo-icon.png
tags: []
owner: puppet
developers:
- greg.larkin@puppet.com
- tara.swenson@puppet.com
private: true
published: true
show_timer: true
skipping_enabled: true
challenges:
- slug: create-an-inventory-file-and-define-your-targets
  id: 69ibjvibsm9i
  type: challenge
  title: " Create an Inventory File and Define Your Targets \U0001F4C4"
  teaser: Group targets by a common operating system or functional role to streamline orchestration tasks.
  notes:
  - type: text
    contents: |-
      In this challenge, you will create a Bolt project, and then populate its inventory file so that you can manage targets by group name. A Bolt project is a directory that contains the project files, configuration files, and data to run a workflow. The project's `inventory.yaml` file is where you define groups of targets and connection information.

      Grouping your targets enables you to run Bolt commands against the group instead of having to reference each target individually.

      ## **Start this track**
      When your environment has finished spinning up, you'll see a green **Start** button at the bottom of the screen (this takes about 1 minute). Click it when you're ready to begin the track.
  assignment: "When you create a Bolt project by running the ```bolt project init``` command, Bolt creates an inventory file with placeholder content in the project directory. The project directory also contains configuration files, plans, and tasks.\n\n# Step 1: Create and navigate to your project directory\nAt the command prompt on the Bolt tab to the left, type the following command (you can also copy it and paste it at the command prompt).\n\n ```\n mkdir myproject && cd myproject\n ```\n\n# Step 2: Create the Bolt project\nThen, run:\n\n ```\n bolt project init\n ```\n\n✏️ **Note:** For this simple example, you can omit the project name, which would follow `init`. Project names must begin with a lowercase letter and can contain only lowercase letters, numbers, and underscores.\n\nYou might create multiple Bolt projects, each with its own purpose, such as managing database servers, patching Windows machines, or completing greenfield deployment tasks.\n\nIf multiple projects run against the same inventory, they can share an inventory file so you don't need to maintain your inventory in each project. For details, search for \"inventory files\" in the [Bolt documentation](https://puppet.com/docs/bolt/latest/bolt.html).\n\n# Step 3: View the inventory.yaml file\nOn the **Editor** tab, expand **myproject** and open `inventory.yaml`.\n<img src=\"https://storage.googleapis.com/instruqt-images/Build-a-bolt-inventory-file-on-linux/myproject-2.png\">\n Notice that the file contains only placeholder content.\n\n# Step 4: Update the inventory file content\nThe following code defines a group named **webservers**, made up of targets web1 and web2. Copy the code into the inventory file, replacing the placeholder content.\n\n✏️ **Note:**  For this example, Bolt connects to the **webservers** targets over SSH and skips the host key validation.\n   - In a self-contained, isolated environment (such as this lab) you can skip checking the host key.\n   - In a typical production environment, make sure to have SSH server host key policies for distributing and validating keys during SSH client connections.\n\n    ---\n    groups:\n      - name: webservers\n        targets:\n          - web1\n          - web2\n        config:\n          transport: ssh\n    config:\n      ssh:\n        host-key-check: false\n\n# Step 5: Save your changes\n\nClick the disk icon beside the file name (\U0001F4BE) and then click the **Bolt** tab.\n\n# Step 6: Verify that your targets are correct\nOn the **Bolt** tab, check that the targets are specified correctly. Run the following command to show the list of targets that Bolt commands run against:\n```\nbolt inventory show --targets all\n```\n\n✔️ **Result:** If your inventory file is set up correctly, you'll see the following output, which includes the number of targets in the group and their names:\n\n    Targets\n      web1\n      web2\n    Inventory source\n      /root/myproject/inventory.yaml\n    Target count\n      2 total, 2 from inventory, 0 adhoc\n    Additional information\n      Use the '--detail' option to view target configuration and data\n\n\nIf your file isn't correct, go back to step 4 and try again.\n\nClick **Check** to continue.\n"
  tabs:
  - title: Bolt
    type: terminal
    hostname: puppet
  - title: Editor
    type: code
    hostname: puppet
    path: /root
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 360
- slug: run-a-command-on-your-targets
  id: aumjsw3ompmd
  type: challenge
  title: ' Run a Command on Your Targets ✔️'
  teaser: Run the `ntpdate` command to synchronize the system time on the targets defined in the **webservers** group.
  notes:
  - type: text
    contents: |-
      In this challenge, you'll run the `ntpdate` command to synchronize the system time of the targets in the **webservers** group that you defined in the `inventory.yaml` file.

      Assigning targets to groups and running commands against the group enables you to:
      - Eliminate hard-coded target names from commands and scripts.
      - Easily move targets among groups as system needs change.
      - Ensure that commands run against the correct targets.

      Click **Start** when you’re ready to begin.
  assignment: |+
    To run a Bolt command against multiple targets *without* an inventory file, you need a comma-separated list of targets to run the command against, which looks like this:
    `bolt command run <command> --targets web1,web2`

    But because you defined the webservers group in `inventory.yaml` in the previous challenge, you can simplify the command by specifying the group name:
    `bolt command run <command> --targets webservers`

    # Step 1: Run the `ntpdate` command
    Run the following `ntpdate` command to synchronize the system time on the targets defined in the **webservers** group:

    ```
    bolt command run 'ntpdate -b time.apple.com' --targets webservers
    ```

    Notice that the time was adjusted on the targets (your run date and time will differ):
    ```
        Started on web2…
        Started on web1…
        Finished on web2:
          14 May 16:32:35 ntpdate[1605]: adjust time server 50.205.57.38 offset -0.000023 sec
        Finished on web1:
            14 May 16:32:35 ntpdate[1599]: adjust time server 45.87.76.3 offset 0.000690 sec
        Successful on 2 targets: web1,web2
        Ran on 2 targets in 7.55 sec
    ```

    To recap, running commands against defined groups instead of against individual targets enables you to:
     - Eliminate hard-coded target names from commands and scripts.
     - Easily move targets among groups as system needs change.
     - Ensure the correct commands run against the correct targets.

     Click **Check** to continue.


  tabs:
  - title: Bolt
    type: terminal
    hostname: puppet
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 360
- slug: build-a-bash-script-and-run-it-on-your-targets
  id: xuxnxfxlf8vj
  type: challenge
  title: "Build a Bash Script and Run It on Your Targets \U0001F4DC"
  teaser: Invoke a script with Bolt to complete a multistep NTP configuration.
  notes:
  - type: text
    contents: |-
      In this challenge, you will build and run an NTP configuration script.

      This script:
       - Synchronizes the system time on all your targets.
       - Appends more NTP servers to the end of the `ntp.conf` files.
       - Starts the NTP service.

      Click **Start** when you’re ready to begin.
  assignment: |-
    ✏️ **Note:**  This example uses a Bash script, but you can use a script written in any programming language that the targets support.

    In this challenge, you'll write an NTP configuration script and run it on your targets. In the same way that you ran a *command* on a group of targets, you'll run a *script* against the same group, replacing the command name with the path to the script:

    `bolt script run <filepath.sh> --targets webservers`

    # Step 1: Open the script
    On the **Editor** tab, open the `/root/configure-ntp.sh` script.

    # Step 2: Build the script
    Use the comments in the file and your knowledge of NTP configuration to build a script.

    ✏️ **Note:**  If you get stuck, open `/root/.instruqt/configure-ntp.sh`, copy the code and paste it into your script.

    # Step 3: Test the script
    Go back to the **Bolt** tab and run the following command:
    ```
    bolt script run /root/configure-ntp.sh --targets webservers
    ```

    If you built the script correctly, you'll see output similar to this:
    ```
        Started on web1...
        Started on web2...
        Finished on web1:
          14 May 22:32:51 ntpdate[1465]: step time server 17.253.52.253 offset -0.000310 sec
        Finished on web2:
            14 May 22:32:51 ntpdate[1471]: step time server 17.253.52.253 offset -0.000089 sec
        Successful on 2 targets: web1,web2
        Ran on 2 targets in 7.85 sec
    ```

    This output shows the one-time synchronization of the NTP server with the system time on web1 and web2.

    If the output doesn’t match the output shown above, go to the **Editor** tab and review the sample solution in the `/root/.instruqt` directory.
  tabs:
  - title: Bolt
    type: terminal
    hostname: puppet
  - title: Editor
    type: code
    hostname: puppet
    path: /root
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 360
- slug: knowledge-check
  id: czozzgdjuqh6
  type: challenge
  title: "Knowledge Check \U0001F4A1"
  teaser: Test your knowledge to make sure you've got it down.
  notes:
  - type: text
    contents: |-
      You’re doing great! Now, make sure you’ve got it all down.

      Click **Start** when you’re ready to begin.
  assignment: |-
    Answer the questions, click **Submit**, and then click **View accuracy** to see how you did. Your results will appear in a new browser tab.

    When you've finished reviewing your results, click **Check** to continue the track.
  tabs:
  - title: "Knowledge Check \U0001F4A1"
    type: website
    hostname: puppet
    url: https://docs.google.com/forms/d/e/1FAIpQLScMVt6E0Q_tOTbASCNqMxfzgfv0yBs8h-wvZyW5HNzQkvUPJA/viewform?embedded=true
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 360
- slug: wrapup-and-feedback
  id: pdjxuihtzshv
  type: challenge
  title: "Wrap-Up & Feedback \U0001F4AC"
  teaser: Recap what you learned and tell us what you think.
  notes:
  - type: text
    contents: |-
      Excellent! You’re nearly done!

      Click **Start** to review what you learned and let us know what you thought of this track.
  assignment: |
    In this lab, you:
     - Discovered how to create inventory files and assign targets to a group in an inventory file.
     - Learned why using groups saves time and simplifies commands.
     - Ran a command to list the targets in the inventory file to ensure the file was set up correctly.
     - Created a script to configure NTP on a server.
     - Ran the script against a group of targets defined in the inventory file.
     - Tested your knowledge to make sure you've got it down.

    Want to learn more about Bolt or Puppet? Check out these resources:
    - [Bolt Docs](https://puppet.com/docs/bolt/latest/bolt.html)
    - [Puppet Compass](https://learn.puppet.com/)
    - [Puppet Community Slack channel](https://slack.puppet.com/)

    To access the commands used throughout this lab, check out the companion [Lab Aid](https://puppet-kmo.gitbook.io/lab-aids/-MZKPjwKRKKFuXxxy7ge/build-a-bolt-inventory-file-on-linux).

    Have ideas for improvement? Submit a pull request on [Github](https://github.com/puppetlabs/puppet-practice-labs/tree/main/build-a-bolt-inventory-file-on-linux) or reach out to us directly at <a href="mailto:education@puppet.com">education@puppet.com</a>.

    To close this track, click **Check**.
  tabs:
  - title: Feedback
    type: website
    hostname: puppet
    url: https://docs.google.com/forms/d/e/1FAIpQLSc89N9XCQoDEkET-uVKqjZWGnqMw0IbzZeeuuCKcoQk5oXr0g/viewform?embedded=true
  - title: Platform Help
    type: website
    hostname: puppet
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 360
checksum: "1054214024656254416"
