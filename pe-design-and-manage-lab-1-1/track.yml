slug: pe-design-and-manage-lab-1-1
id: yu56fr4jobeo
type: track
title: Simulate Changes by Running in No-op Mode
teaser: Simulate a Puppet run to understand how Puppet remediates drift and keeps your systems in their desired state.
description: |-
  # We're putting the finishing touches on this BETA Puppet Practice Lab — go ahead and take a peek!

  Please help us find any bugs that need to be zapped and share your feedback for improving this learning experience by clicking the **Bug Zapper** tab at the top of each challenge and completing the short survey.

  We welcome your suggestions and value your feedback. If you have additional comments or suggestions after completing this BETA Puppet Practice Lab, please [reach out to us directly](mailto:education@puppet.com).
  ___

  In this lab, you will simulate a Puppet run to understand how Puppet remediates drift and keeps your systems in their desired state. You will:


  - Cause drift by making a breaking change to a Puppet component (the `pxp-agent` or the uninstaller script).
  - Run Puppet with the `--noop` parameter to simulate a Puppet run without making changes to the system.
  - Run Puppet normally to fix the drift you caused.

  **Prerequisites**

  None

  ---

  **Keep an eye on the clock**

  ![10 minute lab](https://storage.googleapis.com/instruqt-images/Clocks%20for%20Track%20Duration/10min100.png) The virtual learning environment will stay up for 60 minutes, however, **this lab should only take about 10 minutes** to complete. When your learning environment expires, your work will not be saved. If you haven't completed the lab, you can simply restart it.

  Click **Start track** when you're ready to begin.
icon: https://storage.googleapis.com/instruqt-images/bz-smallicon-1.png
tags:
- ""
- PE201
- noop
owner: puppet
developers:
- thomas.chisholm@puppet.com
- jain.waldrip@puppet.com
- greg.larkin@puppet.com
- alex.williamson@puppet.com
private: true
published: true
show_timer: true
challenges:
- slug: simulate-changes-with-noop
  id: 8dcbrxcg3ex5
  type: challenge
  title: Run Puppet in no-op mode
  teaser: Cause intentional drift and use no-op mode to see how Puppet would fix it. Then, run Puppet to implement those changes.
  notes:
  - type: text
    contents: |-
      **What you'll learn**

      In this lab you will:
      - Cause drift by making a breaking change to a Puppet component of your choosing (the `pxp-agent` or the uninstaller script).
      - Run Puppet with the `--noop` parameter to simulate a Puppet run without enforcing the agent catalog and making changes to the system.
      - Run Puppet normally to fix the drift you caused.

      Click **Start** when you're ready to begin.
  assignment: "## **First, let's break something.**\n**What can we break?** Out of the box, Puppet manages only itself. So let's break Puppet!\n\nSpecifically, you'll cause drift on the agent node by making an unexpected change to one or more of the following components:\n\n| # | Type | Component |\n|:-:|:-:|-------|\n|**1**| Service | ` [pxp-agent] ` |\n|**2**| File | ` [pxp-agent.conf] ` |\n|**3**| File | ` [puppet-enterprise-uninstaller] ` |\n\n**Instructions**\n\n1. Choose one or more components to break. Then, cause drift on the node in the following ways:\n     | # | How to cause drift |\n     |:-:|------- |\n     |**1**| Stop the service by running this commnand: <br> ``` service pxp-agent stop ``` |\n     |**2**| Add text to the config file by running this command: <br> ``` echo hello > /etc/puppetlabs/pxp-agent/pxp-agent.conf ``` |\n     |**3**| Remove the uninstall script by running this command: <br> ``` rm /opt/puppetlabs/bin/puppet-enterprise-uninstaller ```|\n\n## **Next, let's see how Puppet would fix it.**\n\nRun Puppet in no-op mode to simulate a Puppet run and understand what the Puppet agent would do.\n\n## Instructions\n\n1. Run the command you think would trigger a Puppet run in no-op mode. (Hint: You can run the `puppet agent --help` command to get clues.)\n     | # | Choose a command to run |\n     |:-:|------- |\n     |**1**| ```puppet agent run --noop``` |\n     |**2**| ```puppet agent -t --noop``` |\n     |**3**| ```puppet agent get_catalog --noop``` |\n\n2. Examine the output for the mention of `noop` to see the changes Puppet would have made.\n\n\U0001F4A1 **Tip:** Look for `/Stage[main]` in the output to quickly find the changes.\n\n## **Finally, let's run Puppet to fix it.**\n## Instructions\n\n1. Run Puppet normally:\n\n    ```puppet agent -t```\n\n2. Examine the output to see the changes Puppet made to bring the node back into its desired state (all Puppet components fully functional).\n\n\U0001F388 **Congratulations!** How easy was that? Now imagine hundreds or thousands of these failures happening overnight — due to an automatic update, for instance — and you'll start to see the true power and potential of Puppet.\n\n---\n\n**Find any bugs or have feedback? Click the **Bug Zapper** tab near the top of the page and let us know!**\n\nTo close this lab, click **Check**.\n"
  tabs:
  - title: Linux Agent
    type: terminal
    hostname: nixagent
  - title: "Bug Zapper \U0001F99F⚡"
    type: website
    hostname: nixagent
    url: https://docs.google.com/forms/d/e/1FAIpQLSfeF6zSPTGev89tNO86g37Bp7np76X9tdiP_njUjWzyT0tTqA/viewform?embedded=true
  difficulty: basic
  timelimit: 3600
checksum: "4900092749513271588"
