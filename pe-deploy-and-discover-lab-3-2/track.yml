slug: pe-deploy-and-discover-lab-3-2
id: 6iykmwi1khah
type: track
title: 'PE Deploy and Discover - Lab 3.2: Establish server roles by reinstalling agents with trusted facts'
teaser: Purge the agent from your nodes and reinstall it with Puppet's trusted facts.
description: |-
  # We're putting the finishing touches on this BETA Puppet Practice Lab — go ahead and take a peek!

  Please help us find any bugs that need to be zapped and share your feedback for improving this learning experience by clicking the **Bug Zapper** tab at the top of each challenge and completing the short survey.

  Thank you for your help. We welcome your suggestions and value your feedback. If you have additional comments or suggestions after completing this BETA Puppet Practice Lab, please [reach out to us directly](mailto:education@puppet.com). We want to hear from you.
  ___

  **What you'll learn**

  In this, lab, you'll purge the Puppet agent from your nodes, and then reinstall the agent on each node to include Puppet's pp_role and pp_datacenter trusted facts.

  Because trusted facts are extracted from the agent certificate, the data is immutable, providing a higher level of security for your nodes. You can use the data from facts to classify nodes so that you can get configuration and performance data for a specific group of nodes.


  **Prerequisites**

  To complete this lab, you must have already completed the following PE Deploy and Discover labs:
   - [Lab 3.0: Identify Information About Your Nodes By Using facter_task & External Facts](https://play.instruqt.com/puppet/invite/7njh4szvazdy)
   - [Lab 3.1: Identify Server Roles by Using Package Data Collection](https://play.instruqt.com/puppet/invite/qbye99iuacew)

  **Before you start**

  Keep an eye on the clock. You have 30 minutes to complete this lab. After 30 minutes, your learning environment expires and your work will not be saved. If you haven't completed the lab, you can simply restart it. Click **Start track** when you're ready to begin.
icon: ""
tags:
- ""
owner: puppet
developers:
- thomas.chisholm@puppet.com
- tara.swenson@puppet.com
- catherine.trinkwon@puppet.com
- greg.larkin@puppet.com
private: true
published: true
show_timer: true
challenges:
- slug: working-with-puppets-trusted-facts
  id: 0fmim6wrx8d8
  type: challenge
  title: Working with Puppet's trusted facts
  teaser: Purge the agents and reinstall them with trusted facts.
  notes:
  - type: text
    contents: |-
      In this lab, you'll learn how to add trusted facts to agents. You will:

      1. Manually uninstall the agents and purge them from the primary server.
      2. Reinstall your agents with two trusted facts: `pp_role` and `pp_datacenter`
      3. Re-sign the agent certificate with the trusted facts.

      This lab environment takes about 7 minutes to spin up. When the **Start** button appears, click it to begin.
  assignment: |-
    This lab includes instructions for both Linux and Windows. To follow the Linux instructions, proceed below. Or, you can jump to the [Windows instructions](#windows).

    <a name="linux"><img src="https://storage.googleapis.com/instruqt-images/graphic-linux.png"></a>
    ## Uninstall Linux agents

    The **Linux Agent 1** and **Linux Agent 2** tabs represent Linux nodes. On each Linux agent node, complete the following steps.

    1. Retrieve the node's certname by running the following command:
    ```
    puppet config print certname
    ```
    ✏️ Tip: You can also get the certname by logging in to the **PE Console** (ID **admin** and password **puppetlabs**). Go to the **> Nodes** page, click the node name and on the Node details page, find the **clientcert** value on the **Facts** tab.

    2. Copy the certname to a local text editor of your choice — you'll need it later in the lab.

    3. Retire the node by running the *nix agent uninstall script on each:

    ```
    /opt/puppetlabs/bin/puppet-enterprise-uninstaller -y -pd
    ```
    4. Verify that the Puppet directory has been removed by running the following command:

    ```
    ls /etc/puppetlabs
    ```
    ✔️ Result: The output confirms that the agent no longer exists:

    ```
    ls: cannot access /etc/puppetlabs: No such file or directory
    ```
    ✏️ Note: Remember to complete these instructions on each Linux agent node before proceeding.

    ## Remove nodes from the primary server

    Uninstalling the agent from a node does not remove the node from management by the primary server. If you no longer want the primary server to manage an agent node, you must also purge it, which will:
    - Remove the node from PuppetDB and the console.
    - Delete the primary server’s information cache for the node.
    - Revoke the node’s certificate by updating the certificate revocation list (CRL).
    - Free up the license and hostname for reuse by another node.

    1. If you haven't already done so, log in to the PE console (on the **PE Console** tab) with ID **admin** and password **puppetlabs**.

    2. How that you're logged in, you can run commands on the primary server. Go to the **Primary Server** tab.

    3. Purge each Linux node by running the following command for each one, replacing `<CERTNAME>` with the printed certname of each node:

    ```
    puppet node purge <CERTNAME>
    ```
    ✔️ Result: In the output, notice the message: "Node `<CERTNAME>` was purged."

    ✏️ Note: Remember to run this command for each Linux node before proceeding.

    ## Install agents with trusted facts and an autosign password

    Refer to the data you gathered in labs 3.0 and 3.1 so that you can use the correct values in the next step:

    Replace `<DATACENTER>` with the value of the external `datacenter` fact that you created in lab 3.0.
    | Time Zone      | Data Center      |
    |----------------|-----------------|
    | Eastern / EDT  | datacenter-east |
    | Pacific / PDT  | datacenter-west |

    Replace `<ROLE>` with the package data you gathered from each node in lab 3.1.
    | Package     | Role            |
    | ----------- | --------------- |
    | Java 8      | ecommerce       |
    | httpd       | cmsweb          |
    | nginx       | cmsloadbalancer |


    1. On the **Primary Server** tab, install an agent on each target by running the following installation script, passing in the corresponding role and data center for each node.
    ```
    uri='https://puppet:8140/packages/current/install.bash'
    curl --insecure "$uri" | sudo bash -s custom_attributes:challengePassword=PASSWORD_FOR_AUTOSIGNER_SCRIPT extension_requests:pp_role=<ROLE> extension_requests:pp_datacenter=<DATACENTER>
    ```
    2. In the PE console, go to the **Nodes** page and click on the node names to view the trusted facts for the new nodes.

    **Congratulations!** You uninstalled the agent from your nodes and purged them from the primary server so that you can reuse their node licenses. You then securely assigned each server's role and data center in your environment by installing the Puppet agent with trusted facts and provided an autosign password to enable certificate signing so that primary server can authenticate the agent.

    **Find bugs or have feedback? Click the **Bug Zapper** tab near the top of the page and let us know!**

    To close this lab, click **Next**.

    <a name="windows"><img src="https://storage.googleapis.com/instruqt-images/graphic-windows.png"></a>
     ## Uninstall Windows agents

    1. Navigate to the **Windows Agent**, and then open a PowerShell terminal: Windows Start --> Windows Powershell --> Windows Powershell
    2. Retrieve the node's certname by running the following command:
    ```
    puppet config print certname
    ```
    ✏️ Note: You can also locate the certname by logging into the **PE Console** and navigating to the **Node Details** page.

    3. Copy the certname to a local text editor of your choice — you will need it later in the lab.

    4. Launch the **Windows Add or Remove Programs** interface by running the following command:
    ```
    appwiz
    ```
    5. Right-click __Puppet Agent (64-bit)__, select __Uninstall__, and follow the prompts to continue to uninstall. Uninstalling the agent removes the Puppet program directory, the agent service, and all related registry keys. This might take a couple of minutes.

    6. The `data` directory remains intact, including all SSL keys. To completely remove the agent from the node, you must manually delete the data directory `C:\ProgramData\PuppetLabs\puppet` by running the following command in the PowerShell terminal:

    ```
    remove-item C:\ProgramData\PuppetLabs\puppet -Recurse -Confirm:$false
    ```
    ## Remove nodes from the primary server

    Uninstalling the agent from a node does not remove the node from the primary server. If you no longer want the primary server to manage an agent node, you must also purge it, which will:
    - Remove the node from PuppetDB and the console.
    - Delete the primary server’s information cache for the node.
    - Revoke the node’s certificate by updating the certificate revocation list (CRL).
    - Free up the license and hostname for reuse by another node.

    1. Click the **Primary Server** tab to go to the primary server.
    2. Purge the node by running the following command, replacing <CERTNAME> with the certname from step 3 above.
    ```
    puppet node purge <CERTNAME>
    ```
    ✔️ Result: In the output, notice the message: "Node `<CERTNAME>` was purged."

    ## Install agents with trusted facts and an autosign password

    Refer to the data you gathered in labs 3.0 and 3.1 so that you can use the correct values in the next step:

    Replace `<DATACENTER>` with the value of the external `datacenter` fact that you created in lab 3.0.
    | Time Zone      | Data Center      |
    |----------------|-----------------|
    | Eastern / EDT  | datacenter-east |
    | Pacific / PDT  | datacenter-west |

    Replace `<ROLE>` with the value from the package data you gathered from the node in lab 3.1.
    | Package     | Role            |
    | ----------- | --------------- |
    | Java 8      | ecommerce       |
    | apache      | cmsweb          |
    | nginx       | cmsloadbalancer |

    1. On the **Windows Agent**, install an agent by using the following installation script, passing in the corresponding role and datacenter for the last command. Run the following commands one at a time:
    ```
    [Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};
    ```
    ```
    $webClient = New-Object System.Net.WebClient;
    ```
    ```
    $webClient.DownloadFile('https://puppet:8140/packages/current/install.ps1', 'install.ps1');
    ```
    ```
    .\install.ps1 custom_attributes:challengePassword=PASSWORD_FOR_AUTOSIGNER_SCRIPT extension_requests:pp_role=<ROLE> extension_requests:pp_datacenter=<DATACENTER>
    ```
    2. If you haven't already done so, log into the **PE console** (ID **admin** and password **puppetlabs**), go to the **Nodes** page, and then click on the Windows node name to view the trusted facts for the new node.

    **Congratulations!** You uninstalled the Puppet agent from your node and purged it from PE so that you can reuse its node license. You securely assigned the server's role and data center in your environment by installing the agent with trusted facts and provided an autosign password to enable certificate signing so that primary server can authenticate the agent.

    **Find bugs or have feedback? Click the **Bug Zapper** tab near the top of the page and let us know!**

    To close this lab, click **Check**.
  tabs:
  - title: PE Console
    type: service
    hostname: puppet
    path: /
    port: 443
  - title: Linux Agent 1
    type: terminal
    hostname: nixagent1
  - title: Linux Agent 2
    type: terminal
    hostname: nixagent2
  - title: Primary Server
    type: terminal
    hostname: puppet
  - title: Windows Agent
    type: service
    hostname: guac
    path: /#/client/c/winagent?username=instruqt&password=Passw0rd!
    port: 8080
  - title: "Bug Zapper \U0001F99F⚡"
    type: website
    hostname: guac
    url: https://docs.google.com/forms/d/1pT9JaoKEsNcq46Xd1sptUKqF2eINQA6aSJdZ5ClWtJA/viewform?embedded=true
  difficulty: basic
  timelimit: 3600
checksum: "140478097615300009"
