#!/bin/bash

set -x

while [ ! -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
    echo "Waiting for Instruqt to finish booting the VM"
    sleep 1
done
sed -i 's/ puppet  # Added by Google/ puppet puppet.c.kmo-instruqt.internal/' /etc/hosts  # TODO: Move to bootstrap?

while  ! nc -z -w3 localhost 443 
do
    echo "Waiting for port 443 to be reachable on localhost"
   
done

cat << 'EOF' > /etc/puppetlabs/puppet/autosign.rb
#!/opt/puppetlabs/puppet/bin/ruby
#
# A note on logging:
#   This script's stderr and stdout are only shown at the DEBUG level
#   of the server's logs. This means you won't see the error messages
#   in puppetserver.log by default. All you'll see is the exit code.
#
#   https://docs.puppet.com/puppet/latest/ssl_autosign.html#policy-executable-api
#
# Exit Codes:
#   0 - A matching challengePassword was found.
#   1 - No challengePassword was found.
#   2 - The wrong challengePassword was found.
#
require 'puppet/ssl'

csr = Puppet::SSL::CertificateRequest.from_s(STDIN.read)
psk = File.read('/etc/puppetlabs/puppet/psk').chomp.strip

if pass = csr.custom_attributes.find do |attribute|
     ['challengePassword', '1.2.840.113549.1.9.7'].include? attribute['oid']
   end
else
  puts 'No challengePassword found. Rejecting certificate request.'
  exit 1
end

if pass['value'] == psk
  exit 0
else
  puts "challengePassword does not match: #{pass['value']}"
  exit 2
end
EOF

chmod +x /etc/puppetlabs/puppet/autosign.rb
chown pe-puppet:pe-puppet /etc/puppetlabs/puppet/autosign.rb

cat << EOF > /etc/puppetlabs/puppet/psk
PASSWORD_FOR_AUTOSIGNER_SCRIPT
EOF

chmod 600 /etc/puppetlabs/puppet/psk
chown pe-puppet:pe-puppet /etc/puppetlabs/puppet/psk

puppet config set autosign /etc/puppetlabs/puppet/autosign.rb

service pe-puppetserver restart

# Wait for any running agent to finish
while [ -f /opt/puppetlabs/puppet/cache/state/agent_catalog_run.lock ]; do
  sleep 1
done

# Run the agent again to reconfigure the installation script
/usr/local/bin/puppet agent -t

sleep 5

ssh -o StrictHostKeyChecking=no -l root -i /root/.ssh/id_rsa nixagent1 'curl --insecure https://puppet:8140/packages/current/install.bash | sudo bash -s custom_attributes:challengePassword=PASSWORD_FOR_AUTOSIGNER_SCRIPT; yum install -y httpd'
ssh -o StrictHostKeyChecking=no -l root -i /root/.ssh/id_rsa nixagent2 'curl --insecure https://puppet:8140/packages/current/install.bash | sudo bash -s custom_attributes:challengePassword=PASSWORD_FOR_AUTOSIGNER_SCRIPT; yum install -y nginx'

# Start Agent up on winagent
rpm -Uvh https://yum.puppet.com/puppet-tools-release-el-7.noarch.rpm
yum install -y puppet-bolt-3.17.0 jq
bolt command run 'Start-Service puppet' --no-ssl-verify --user Administrator --password Puppetlabs! --targets winrm://winagent



# State code for Lab 3.0
# Set timezone
bolt command run 'tzutil /s "Eastern Standard Time"' --no-ssl-verify --user Administrator --password Puppetlabs! --targets winrm://winagent
ssh -o StrictHostKeyChecking=no -l root -i /root/.ssh/id_rsa nixagent1 'timedatectl set-timezone America/Los_Angeles'
ssh -o StrictHostKeyChecking=no -l root -i /root/.ssh/id_rsa nixagent2 'timedatectl set-timezone America/Los_Angeles'

# Set datacenter fact on winagent:
bolt command run 'New-Item -Type File -Path C:\ProgramData\PuppetLabs\Facter\facts.d\datacenter.ps1' --no-ssl-verify --user Administrator --password Puppetlabs! --targets winrm://winagent
bolt command run "Set-Content -Value 'Write-Host "datacenter=east"' -Path C:\ProgramData\PuppetLabs\Facter\facts.d\datacenter.ps1" --no-ssl-verify --user Administrator --password Puppetlabs! --targets winrm://winagent
bolt command run 'cd;mkdir -p /etc/puppetlabs/facter/facts.d;touch /etc/puppetlabs/facter/facts.d/datacenter.sh;echo "echo datacenter=west" > /etc/puppetlabs/facter/facts.d/datacenter.sh' --targets ssh://nixagent1 --user root --no-host-key-check
bolt command run 'cd;mkdir -p /etc/puppetlabs/facter/facts.d;touch /etc/puppetlabs/facter/facts.d/datacenter.sh;echo "echo datacenter=west" > /etc/puppetlabs/facter/facts.d/datacenter.sh' --targets ssh://nixagent2 --user root --no-host-key-check


# State code for Lab 3.1

# Enable the package inventory
cat << 'EOF' > /tmp/pe-agent-enable-package-inventory.pp
node_group { 'PE Agent':
  ensure               => 'present',
  classes              => {
  'puppet_enterprise::profile::agent' => {
    'package_inventory_enabled' => true,
    'pcp_broker_host' => 'puppet',
    'primary_uris' => ['puppet']
  }
},
  environment          => 'production',
  override_environment => 'false',
  parent               => 'PE Infrastructure',
  provider             => 'https',
  rule                 => ['and',
  ['~',
    ['fact', 'aio_agent_version'],
    '.+']],
}
EOF

puppet apply /tmp/pe-agent-enable-package-inventory.pp

# Generate a token to use with puppet job run
type_header='Content-Type: application/json'
uri="https://$(puppet config print server):4433/rbac-api/v1/auth/token"
data='{"login": "admin",
       "password": "puppetlabs"}'

while ! nc -z -w3 localhost 4433
do
  echo "Waiting for port 4433 to be reachable on localhost"
done

curl --insecure --header "$type_header" --request POST "$uri" --data "$data" > /tmp/token.json
mkdir -p /root/.puppetlabs
cat /tmp/token.json | jq -r .token > /root/.puppetlabs/token
chmod 600 /root/.puppetlabs/token

# Now run Puppet twice on the nodes
puppet job run --query 'nodes {}'
puppet job run --query 'nodes {}'
