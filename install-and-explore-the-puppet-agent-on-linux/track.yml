slug: install-and-explore-the-puppet-agent-on-linux
id: jwzadwkm6e9p
type: track
title: Install and Explore the Puppet Agent on Linux
teaser: Install the Puppet agent on a fresh node and explore some of the tools that it provides.
description: |-
  In this track, you’ll use the command-line tools installed with the Puppet agent to interact with a node in the same way an agent would.

  **Why complete this track?**

  This hands-on approach will help you understand the agent's role in the broader Puppet architecture and how the agent checks and modifies the state of a node it’s installed on.

  ---

  **Keep an eye on the clock**

  ![30 minute lab](https://storage.googleapis.com/instruqt-images/Clocks%20for%20Track%20Duration/30min100.png) The virtual learning environment will stay up for 60 minutes, however, **this lab should only take about 30 minutes** to complete. When your learning environment expires, your work will not be saved. If you haven't completed the lab, you can simply restart it.

  Click **Start track** when you're ready to begin.
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/puppet.png
tags:
- ""
owner: puppet
developers:
- tara.swenson@puppet.com
- thomas.chisholm@puppet.com
- bart.kliebert@puppet.com
- greg.larkin@puppet.com
private: true
published: true
show_timer: true
skipping_enabled: true
challenges:
- slug: install-the-puppet-agent-on-a-node
  id: kvex76zt0maw
  type: challenge
  title: "Install the Puppet Agent on a Node \U0001F4BB"
  teaser: Start off by installing the Puppet agent on a fresh node.
  notes:
  - type: text
    contents: |-
      # What is the Puppet agent?
      Puppet is a suite of tools and services that work together to help you manage and coordinate the systems in your infrastructure.

      One of these tools, the Puppet agent, runs on every system Puppet manages, acting as a maintenance crew that travels between the system where it's installed (the node) and the primary Puppet server.

      The Puppet agent:
      1. Requests and receives the node's desired state information from the primary server.
      1. Enforces the desired state on the node by checking its current state and making changes as needed.
      1. Sends runtime reports about node changes and status to the primary server.

      ## **Start this track**
      When your environment has finished spinning up, you'll see a green **Start** button at the bottom of the screen. Click it when you're ready to begin the track.
  assignment: |
    The best way to learn about Puppet is to try it out for yourself. Start by configuring the Puppet package repository, which by default isn't configured on standard Linux installations. Then, install the Puppet agent.

    # Step 1: Configure the Puppet package repository
    To configure the Puppet package repository, run the following command:
    ```
    rpm -Uvh https://yum.puppet.com/puppet7-release-el-7.noarch.rpm
    ```
    ✔️ **Result:** The `rpm -Uvh` command installs the package that configures the repository. The `-Uvh` flags instruct Puppet to update the system with this package (-U), enable verbose logging (-v), and show a progress bar.

    # Step 2: Install the Puppet agent

    Install the agent by running this command:
    ```
    yum install -y puppet-agent
    ```

    The `yum` command invokes the Linux package manager, which locates the package in any of the configured package repositories (in this case, puppet-agent) and installs it on the system. The package manager also installs any package dependencies.

    The `-y` option suppresses additional installation prompts.


    ✔️ **Result:** Check the Transaction Summary section in the output. If the agent installed successfully, you'll see “Complete!” at the end of the summary.

    ✏️ **Note:** For details about other ways to install Puppet, check out the [Puppet installation docs](https://puppet.com/docs/pe/latest/installing.html).

    # Step 3: Set the path

    Add the `/opt/puppetlabs/bin/` directory to the system path so that you can run the `puppet` command from any directory. Run the following two commands:

    ```
    echo 'export PATH=/opt/puppetlabs/bin/:$PATH' >> ~/.bashrc
    ```
    ```
    source ~/.bashrc
    ```

    ✔️ **Result:** You now can invoke Puppet from any directory on the node.

    # Step 4: Verify the path.

    Invoke Puppet without any parameters by running this command:

    ```
    puppet
    ```

    ✔️ **Result:** Puppet shows a message (which confirms that the path is set) but takes no action.

    To go to the next challenge, click **Check**.
  tabs:
  - title: Linux
    type: terminal
    hostname: linux
  - title: Platform Help
    type: website
    hostname: linux
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 600
- slug: explore-resource-syntax-by-using-the-puppet-agent
  id: zhyswco37bif
  type: challenge
  title: "Explore Resource Syntax by Using the Puppet Agent \U0001F4BB"
  teaser: Request a description of a resource and review the output.
  notes:
  - type: text
    contents: |-
      # What is a resource?
      Resources are the single units of a system that you want to manage, such as users, files, services, or packages.

      One of Puppet's core concepts is the *resource abstraction layer*, whereby information about a resource is represented in Puppet code. To view and modify information about resources, run the `puppet resource` command, which becomes available after you install the agent.

      Click **Start** when you’re ready to begin.
  assignment: |-
    # Step 1
    Request a description of a file resource by running the following command:
    ```
    puppet resource file /tmp/test
    ```
    ✔️ **Result:** The command returns a Puppet code representation of the resource.

    ## Resource syntax
    Let’s break down the output into its basic components:
    ```
    type { 'title':
      parameter => 'value',
    }
    ```
    **Type —** Describes what the resource is. In this case, a file.

    **Title —** A unique name that Puppet uses internally to identify the resource. In this case, it’s the file path and name, */tmp/test*.

    **Attributes** — A bracketed list of parameter => value pairs that specifies the state of the resource and its relationship to the node. A resource can have many parameter values.

    In this example, the agent reports that the file is absent, which means the file does not exist. Yet.

    To go to the next challenge, click **Check**.
  tabs:
  - title: Linux
    type: terminal
    hostname: linux
  - title: Platform Help
    type: website
    hostname: linux
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 400
- slug: describe-a-file-resource
  id: qoptwf0kdkvj
  type: challenge
  title: "Describe a File Resource \U0001F4BB"
  teaser: Create an empty file. Then, request a description of it and review the output.
  notes:
  - type: text
    contents: In the previous challenge, you requested a description of a file that doesn't exist. Let’s see what you get for a real file.
  assignment: |-
    # Step 1
    Run the following command to create an empty file in the same path as in the previous challenge:

    ```
    touch /tmp/test
    ```

    ✔️ **Result:** The system created an empty file named `test` at `/tmp`.

    # Step 2
    Run the `puppet resource` command to see how the file is represented in Puppet's resource syntax:

    ```
    puppet resource file /tmp/test
    ```

    ✔️ **Result:** The output includes the file owner, when it was created, and when it was last modified.

    ## The content hash
    The content parameter value might not be what you expected for an empty file. When the resource tool interprets a file, it converts the content into an SHA256 hash. Puppet uses this hash to compare the content of the file to what it expects.

    To go to the next challenge, click **Check**.
  tabs:
  - title: Linux
    type: terminal
    hostname: linux
  - title: Platform Help
    type: website
    hostname: linux
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 400
- slug: modify-a-file-resource
  id: y7jzqqkgnqww
  type: challenge
  title: "Modify a File Resource \U0001F469‍\U0001F4BB"
  teaser: Use the `puppet resource` tool to add content to an empty file, and then view the file contents.
  notes:
  - type: text
    contents: Next, you’ll run the **puppet resource** command to add content to the empty file.
  assignment: |-
    Running the `puppet resource` command with a `parameter=value` argument instructs Puppet to modify the resource to match that value.

    ✏️ **Note:** While this is a great way to test changes in a development environment, running manual commands is not a robust way to specify a node's desired state. In a real installation, you add Puppet code that describes the desired state to classes and modules, known as the *codebase*. Puppet then uses the codebase to manage your infrastructure so that you don't have to manage it manually.

    # Step 1
    Run the following command:

    ```
    puppet resource file /tmp/test content='Hello Puppet!'
    ```

    ✔️ **Result** Notice the output as Puppet checks the hash of the existing content against the new content that you provided. When Puppet determines that the hashes don't match, it sets the file content to the value of the `content` parameter.

    # Step 2
    Show the file content:

    ```
    cat /tmp/test
    ```
    ✔️ **Result** The system shows the file contents: *Hello Puppet!*


    To go to the next challenge, click **Check**.
  tabs:
  - title: Linux
    type: terminal
    hostname: linux
  - title: Platform Help
    type: website
    hostname: linux
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 600
- slug: describe-a-package-resource
  id: 936x4nodyb0p
  type: challenge
  title: "Describe a Package Resource \U0001F469‍\U0001F4BB"
  teaser: Use the `puppet resource` tool to describe a software package that doesn't yet exist on the node.
  notes:
  - type: text
    contents: |-
      So far, you’ve explored the `file` resource type. However, Puppet manages many types of resources, including:
      - `user`
      - `service`
      - `package`

      Puppet can also manage custom types — for example, types specific to a service or application, such as Apache `vhost` or MySQL `database`.

      In this challenge, you’ll use the agent to describe a software package that doesn't yet exist on the node.
  assignment: |-
    # Step 1
    Run the following command to request a description of the relationship between the node and the Apache HTTP Server software package:

    ```
    puppet resource package httpd
    ```

    ✔️ **Result:** Because this package doesn't exist on the node, Puppet shows the `ensure => purged` parameter value pair.

    The `purged` value is similar to the `absent` value. For a package resource, `purged` indicates that both the package and any configuration files typically installed by the package manager are both absent.

    ## What do you think?
    What parameter could you add to the `puppet resource` command to instruct Puppet to *install* the package instead of just describing it? You’ll find out in the next challenge!

    To go to the next challenge, click **Check**.
  tabs:
  - title: Linux
    type: terminal
    hostname: linux
  - title: Platform Help
    type: website
    hostname: linux
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 520
- slug: install-a-package
  id: 4vclrt84vclu
  type: challenge
  title: "Install a Package \U0001F469‍\U0001F4BB"
  teaser: Use the Puppet agent to install a package and learn about package providers.
  notes:
  - type: text
    contents: |-
      # Question
      What parameter would you add to the `puppet resource` command from the previous challenge to instruct Puppet to install the package instead of just describing it?

      # Answer
      Adding the `ensure=present` parameter to the command will install the package.
  assignment: |2-

    # Step 1
    Run the following command to have Puppet install the Apache HTTP Server software package:

    ```
    puppet resource package httpd ensure=present
    ```

    ✔️ **Result:** Puppet installs the package, and the value of the `ensure` parameter now shows the version that's installed.

    ## How did Puppet know I specified a real package name?
    Puppet uses a default package provider such as `yum` or `apt`, depending on your OS. This package provider gets, installs, and manages packages by connecting to official Red Hat, Ubuntu, and third-party software repositories.

    # Step 2
    Notice what happens when you run the command again with a bogus package:

    ```
    puppet resource package bogus-package ensure=present
    ```

    ✔️ **Result:** Puppet shows an error indicating that it couldn't find the bogus package.

    ## Can I specify which package provider installs a package?
    Yes. Simply add the `provider` parameter to the command.

    # Step 3
    Run the following command:
    ```
    puppet resource package bogus-package ensure=present provider=gem
    ```

    ✔️ **Result:** As expected, Puppet still can't install the bogus package, however, this time the error message comes from the `gem` package provider, not `yum`.

    ## Can I specify which package version to install?
    Yes. Simply specify the version in the `ensure` parameter. If you don't specify a version, Puppet installs the latest available.

    The value `present` means *install the latest version*, but other values are interpreted as a specific version. If the package provider can't find the requested version, you'll see an error in the output.

    # Step 4
    Run the following command:
    ```
    puppet resource package httpd ensure=2.4.6-97.el7.centos
    ```
    ## Result
    Puppet installs the version that you specify.

    # One final note
    Remember that in this training you are using these command-line tools manually. In an automated production environment, Puppet configures nodes based on the Puppet codebase on the primary Puppet server.

    So, for example, if you always want a specific package version to come from a specific provider, you must specify those parameters as part of the command in a script.

    To go to the next challenge, click **Check**.
  tabs:
  - title: Linux
    type: terminal
    hostname: linux
  - title: Platform Help
    type: website
    hostname: linux
    url: https://puppet-kmo.gitbook.io/instruqt-platform-help/
  difficulty: basic
  timelimit: 600
- slug: knowledge-check
  id: 1zqwtvtfvyhl
  type: challenge
  title: "Knowledge Check \U0001F4A1"
  teaser: Test your knowledge to make sure you've got it down.
  notes:
  - type: text
    contents: |-
      # Great job!

      Next, check your knowledge to make sure you've got it down.

      Click **Start** when you're ready.
  assignment: |-
    Answer the questions, click **Submit**, and then click **View accuracy** to see how you did. Your results will appear in a new browser tab.

    When you've finished reviewing your results, click **Check** to continue the track.
  tabs:
  - title: Knowledge Check
    type: website
    hostname: linux
    url: https://docs.google.com/forms/d/e/1FAIpQLSf9HbjuXjCjfLeN28hqqv5f1VSKDgm-wPCc4cANv6CQQee4UQ/viewform?embedded=true
  difficulty: basic
  timelimit: 200
- slug: wrapup-and-feedback
  id: nyd2wskqueys
  type: challenge
  title: "Wrap-Up & Feedback \U0001F4AC"
  teaser: Recap what you learned and tell us what you think.
  notes:
  - type: text
    contents: |-
      # Excellent! You’re nearly done!

      Click **Start** to review what you learned and let us know what you thought of this track.
  assignment: |-
    In this lab, you used Puppet’s command-line tools to interact directly with a node in the same way the agent would.
    You learned about the agent's role in the broader Puppet architecture and how the agent checks and modifies the state of a node that it’s installed on.

    Want to learn more about Puppet Enterprise? Check out these resources:
    - [Puppet Enterprise Docs](https://puppet.com/docs/pe/latest)
    - [Puppet Compass](https://learn.puppet.com/)
    - [Puppet Community Slack](https://slack.puppet.com/)

    To get the list of commands that you used in this lab, download the [Lab Aid](https://puppet-kmo.gitbook.io/lab-aids/-MZKPjwKRKKFuXxxy7ge/install-and-explore-the-puppet-agent-on-linux).

    Have ideas for improvement? Submit a pull request on [Github](https://github.com/puppetlabs/puppet-practice-labs/tree/main/install-and-explore-the-puppet-agent-on-linux) or reach out to us directly at <a href="mailto:education@puppet.com">education@puppet.com</a>.

    Click **Check** to close this track.
  tabs:
  - title: Feedback
    type: website
    hostname: linux
    url: https://docs.google.com/forms/d/e/1FAIpQLSc89N9XCQoDEkET-uVKqjZWGnqMw0IbzZeeuuCKcoQk5oXr0g/viewform?embedded=true
  difficulty: basic
  timelimit: 221
checksum: "8731951814774019446"
